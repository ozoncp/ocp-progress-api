// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-progress-api/ocp-progress-api.proto

package ocp_progress_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateProgressV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProgressV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClassroomId

	// no validation rules for PresentationId

	// no validation rules for SlideId

	// no validation rules for UserId

	return nil
}

// CreateProgressV1RequestValidationError is the validation error returned by
// CreateProgressV1Request.Validate if the designated constraints aren't met.
type CreateProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgressV1RequestValidationError) ErrorName() string {
	return "CreateProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgressV1RequestValidationError{}

// Validate checks the field values on CreateProgressV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProgressV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateProgressV1ResponseValidationError is the validation error returned by
// CreateProgressV1Response.Validate if the designated constraints aren't met.
type CreateProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgressV1ResponseValidationError) ErrorName() string {
	return "CreateProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgressV1ResponseValidationError{}

// Validate checks the field values on DescribeProgressV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeProgressV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProgressId() <= 0 {
		return DescribeProgressV1RequestValidationError{
			field:  "ProgressId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeProgressV1RequestValidationError is the validation error returned by
// DescribeProgressV1Request.Validate if the designated constraints aren't met.
type DescribeProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeProgressV1RequestValidationError) ErrorName() string {
	return "DescribeProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeProgressV1RequestValidationError{}

// Validate checks the field values on DescribeProgressV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeProgressV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeProgressV1ResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeProgressV1ResponseValidationError is the validation error returned
// by DescribeProgressV1Response.Validate if the designated constraints aren't met.
type DescribeProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeProgressV1ResponseValidationError) ErrorName() string {
	return "DescribeProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeProgressV1ResponseValidationError{}

// Validate checks the field values on ListProgressV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProgressV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListProgressV1RequestValidationError is the validation error returned by
// ListProgressV1Request.Validate if the designated constraints aren't met.
type ListProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgressV1RequestValidationError) ErrorName() string {
	return "ListProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgressV1RequestValidationError{}

// Validate checks the field values on ListProgressV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProgressV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProgress() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgressV1ResponseValidationError{
					field:  fmt.Sprintf("Progress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProgressV1ResponseValidationError is the validation error returned by
// ListProgressV1Response.Validate if the designated constraints aren't met.
type ListProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgressV1ResponseValidationError) ErrorName() string {
	return "ListProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgressV1ResponseValidationError{}

// Validate checks the field values on RemoveProgressV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProgressV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProgressId() <= 0 {
		return RemoveProgressV1RequestValidationError{
			field:  "ProgressId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveProgressV1RequestValidationError is the validation error returned by
// RemoveProgressV1Request.Validate if the designated constraints aren't met.
type RemoveProgressV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProgressV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProgressV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProgressV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProgressV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProgressV1RequestValidationError) ErrorName() string {
	return "RemoveProgressV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProgressV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProgressV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProgressV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProgressV1RequestValidationError{}

// Validate checks the field values on RemoveProgressV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProgressV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for HasRemoved

	return nil
}

// RemoveProgressV1ResponseValidationError is the validation error returned by
// RemoveProgressV1Response.Validate if the designated constraints aren't met.
type RemoveProgressV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProgressV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProgressV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProgressV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProgressV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProgressV1ResponseValidationError) ErrorName() string {
	return "RemoveProgressV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProgressV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProgressV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProgressV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProgressV1ResponseValidationError{}

// Validate checks the field values on Progress with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Progress) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ClassroomId

	// no validation rules for PresentationId

	// no validation rules for SlideId

	// no validation rules for UserId

	return nil
}

// ProgressValidationError is the validation error returned by
// Progress.Validate if the designated constraints aren't met.
type ProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgressValidationError) ErrorName() string { return "ProgressValidationError" }

// Error satisfies the builtin error interface
func (e ProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgressValidationError{}
