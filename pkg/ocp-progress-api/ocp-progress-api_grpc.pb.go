// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_progress_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpProgressApiClient is the client API for OcpProgressApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpProgressApiClient interface {
	//  Создаёт новый фрагмент прогресса
	CreateProgressV1(ctx context.Context, in *CreateProgressV1Request, opts ...grpc.CallOption) (*CreateProgressV1Response, error)
	// Возвращает фрагмент прогресса
	DescribeProgressV1(ctx context.Context, in *DescribeProgressV1Request, opts ...grpc.CallOption) (*DescribeProgressV1Response, error)
	MultiCreateProgressV1(ctx context.Context, in *MultiCreateProgressV1Request, opts ...grpc.CallOption) (*MultiCreateProgressV1Response, error)
	UpdateProgressV1(ctx context.Context, in *UpdateProgressV1Request, opts ...grpc.CallOption) (*UpdateProgressV1Response, error)
	// Возвращает список фрагментов прогресса
	ListProgressV1(ctx context.Context, in *ListProgressV1Request, opts ...grpc.CallOption) (*ListProgressV1Response, error)
	// Удаляет фрагмент прогресса
	RemoveProgressV1(ctx context.Context, in *RemoveProgressV1Request, opts ...grpc.CallOption) (*RemoveProgressV1Response, error)
}

type ocpProgressApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpProgressApiClient(cc grpc.ClientConnInterface) OcpProgressApiClient {
	return &ocpProgressApiClient{cc}
}

func (c *ocpProgressApiClient) CreateProgressV1(ctx context.Context, in *CreateProgressV1Request, opts ...grpc.CallOption) (*CreateProgressV1Response, error) {
	out := new(CreateProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/CreateProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProgressApiClient) DescribeProgressV1(ctx context.Context, in *DescribeProgressV1Request, opts ...grpc.CallOption) (*DescribeProgressV1Response, error) {
	out := new(DescribeProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/DescribeProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProgressApiClient) MultiCreateProgressV1(ctx context.Context, in *MultiCreateProgressV1Request, opts ...grpc.CallOption) (*MultiCreateProgressV1Response, error) {
	out := new(MultiCreateProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/MultiCreateProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProgressApiClient) UpdateProgressV1(ctx context.Context, in *UpdateProgressV1Request, opts ...grpc.CallOption) (*UpdateProgressV1Response, error) {
	out := new(UpdateProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/UpdateProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProgressApiClient) ListProgressV1(ctx context.Context, in *ListProgressV1Request, opts ...grpc.CallOption) (*ListProgressV1Response, error) {
	out := new(ListProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/ListProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProgressApiClient) RemoveProgressV1(ctx context.Context, in *RemoveProgressV1Request, opts ...grpc.CallOption) (*RemoveProgressV1Response, error) {
	out := new(RemoveProgressV1Response)
	err := c.cc.Invoke(ctx, "/ocp.progress.api.OcpProgressApi/RemoveProgressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpProgressApiServer is the server API for OcpProgressApi service.
// All implementations must embed UnimplementedOcpProgressApiServer
// for forward compatibility
type OcpProgressApiServer interface {
	//  Создаёт новый фрагмент прогресса
	CreateProgressV1(context.Context, *CreateProgressV1Request) (*CreateProgressV1Response, error)
	// Возвращает фрагмент прогресса
	DescribeProgressV1(context.Context, *DescribeProgressV1Request) (*DescribeProgressV1Response, error)
	MultiCreateProgressV1(context.Context, *MultiCreateProgressV1Request) (*MultiCreateProgressV1Response, error)
	UpdateProgressV1(context.Context, *UpdateProgressV1Request) (*UpdateProgressV1Response, error)
	// Возвращает список фрагментов прогресса
	ListProgressV1(context.Context, *ListProgressV1Request) (*ListProgressV1Response, error)
	// Удаляет фрагмент прогресса
	RemoveProgressV1(context.Context, *RemoveProgressV1Request) (*RemoveProgressV1Response, error)
	mustEmbedUnimplementedOcpProgressApiServer()
}

// UnimplementedOcpProgressApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpProgressApiServer struct {
}

func (UnimplementedOcpProgressApiServer) CreateProgressV1(context.Context, *CreateProgressV1Request) (*CreateProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) DescribeProgressV1(context.Context, *DescribeProgressV1Request) (*DescribeProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) MultiCreateProgressV1(context.Context, *MultiCreateProgressV1Request) (*MultiCreateProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) UpdateProgressV1(context.Context, *UpdateProgressV1Request) (*UpdateProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) ListProgressV1(context.Context, *ListProgressV1Request) (*ListProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) RemoveProgressV1(context.Context, *RemoveProgressV1Request) (*RemoveProgressV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProgressV1 not implemented")
}
func (UnimplementedOcpProgressApiServer) mustEmbedUnimplementedOcpProgressApiServer() {}

// UnsafeOcpProgressApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpProgressApiServer will
// result in compilation errors.
type UnsafeOcpProgressApiServer interface {
	mustEmbedUnimplementedOcpProgressApiServer()
}

func RegisterOcpProgressApiServer(s grpc.ServiceRegistrar, srv OcpProgressApiServer) {
	s.RegisterService(&OcpProgressApi_ServiceDesc, srv)
}

func _OcpProgressApi_CreateProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).CreateProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/CreateProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).CreateProgressV1(ctx, req.(*CreateProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProgressApi_DescribeProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).DescribeProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/DescribeProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).DescribeProgressV1(ctx, req.(*DescribeProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProgressApi_MultiCreateProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).MultiCreateProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/MultiCreateProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).MultiCreateProgressV1(ctx, req.(*MultiCreateProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProgressApi_UpdateProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).UpdateProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/UpdateProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).UpdateProgressV1(ctx, req.(*UpdateProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProgressApi_ListProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).ListProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/ListProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).ListProgressV1(ctx, req.(*ListProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProgressApi_RemoveProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProgressApiServer).RemoveProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.progress.api.OcpProgressApi/RemoveProgressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProgressApiServer).RemoveProgressV1(ctx, req.(*RemoveProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpProgressApi_ServiceDesc is the grpc.ServiceDesc for OcpProgressApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpProgressApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.progress.api.OcpProgressApi",
	HandlerType: (*OcpProgressApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgressV1",
			Handler:    _OcpProgressApi_CreateProgressV1_Handler,
		},
		{
			MethodName: "DescribeProgressV1",
			Handler:    _OcpProgressApi_DescribeProgressV1_Handler,
		},
		{
			MethodName: "MultiCreateProgressV1",
			Handler:    _OcpProgressApi_MultiCreateProgressV1_Handler,
		},
		{
			MethodName: "UpdateProgressV1",
			Handler:    _OcpProgressApi_UpdateProgressV1_Handler,
		},
		{
			MethodName: "ListProgressV1",
			Handler:    _OcpProgressApi_ListProgressV1_Handler,
		},
		{
			MethodName: "RemoveProgressV1",
			Handler:    _OcpProgressApi_RemoveProgressV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-progress-api/ocp-progress-api.proto",
}
